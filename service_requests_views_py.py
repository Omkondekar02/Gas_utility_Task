# -*- coding: utf-8 -*-
"""service_requests/views.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14rl4p8_tdbM5_mfF6q9KdZ1bRaTKlj-C
"""

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from .models import ServiceRequest, ServiceRequestType, RequestComment
from .forms import ServiceRequestForm, RequestAttachmentForm, RequestCommentForm

@login_required
def request_list(request):
    request_list = ServiceRequest.objects.filter(customer=request.user).order_by('-created_at')
    paginator = Paginator(request_list, 10)  # Show 10 requests per page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'service_requests/request_list.html', {'page_obj': page_obj})

@login_required
def create_request(request):
    if request.method == 'POST':
        form = ServiceRequestForm(request.POST)
        attachment_form = RequestAttachmentForm(request.POST, request.FILES)

        if form.is_valid():
            service_request = form.save(commit=False)
            service_request.customer = request.user
            service_request.save()

            files = request.FILES.getlist('file')
            for f in files:
                RequestAttachment.objects.create(service_request=service_request, file=f)

            messages.success(request, 'Your service request has been submitted successfully!')
            return redirect('request_detail', request_id=service_request.id)
    else:
        form = ServiceRequestForm()
        attachment_form = RequestAttachmentForm()

    request_types = ServiceRequestType.objects.filter(is_active=True)
    return render(request, 'service_requests/create_request.html', {
        'form': form,
        'attachment_form': attachment_form,
        'request_types': request_types
    })

@login_required
def request_detail(request, request_id):
    service_request = get_object_or_404(ServiceRequest, id=request_id)

    # Security check to ensure the user can only view their own requests
    if service_request.customer != request.user and not request.user.is_staff:
        messages.error(request, "You don't have permission to view this request.")
        return redirect('request_list')

    comment_form = RequestCommentForm()

    return render(request, 'service_requests/request_detail.html', {
        'service_request': service_request,
        'comment_form': comment_form
    })

@login_required
def add_comment(request, request_id):
    service_request = get_object_or_404(ServiceRequest, id=request_id)

    # Security check to ensure the user can only comment on their own requests or staff can comment on any
    if service_request.customer != request.user and not request.user.is_staff:
        messages.error(request, "You don't have permission to comment on this request.")
        return redirect('request_list')

    if request.method == 'POST':
        form = RequestCommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.service_request = service_request
            comment.user = request.user
            comment.save()
            messages.success(request, 'Your comment has been added.')

    return redirect('request_detail', request_id=service_request.id)